name: .NET Build and Upload Assets to Release

# === ZMĚNA TRIGGERU: Spustí se až po PUBLIKOVÁNÍ release na GitHubu ===
on:
  release:
    types: [published] # Můžeš přidat i 'created' nebo 'edited', pokud chceš reagovat i na drafty/úpravy

permissions:
  contents: write # Stále potřeba pro nahrání assetů

jobs:
  build-and-upload: # Jeden job, který běží v matrixu
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            artifact_suffix: linux-x64
            archive_format: tar.gz
            output_name: context2cb
          - os: macos-latest
            rid: osx-x64
            artifact_suffix: macos-x64
            archive_format: zip
            output_name: context2cb
          - os: macos-latest
            rid: osx-arm64
            artifact_suffix: macos-arm64
            archive_format: zip
            output_name: context2cb
          - os: windows-latest
            rid: win-x64
            artifact_suffix: win-x64
            archive_format: zip
            output_name: context2cb.exe

    runs-on: ${{ matrix.os }}
    name: Build and Upload for ${{ matrix.artifact_suffix }}

    steps:
    - name: Check out code
      # Checkoutneme kód odpovídající TAGU daného release
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }} # Použije tag release jako ref

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Ověř verzi

    - name: Restore dependencies
      run: dotnet restore src/ContextCli/ContextCli.csproj # Ověř cestu

    - name: Publish application
      shell: pwsh
      run: dotnet publish src/ContextCli/ContextCli.csproj -c Release --self-contained true /p:PublishSingleFile=true -r ${{ matrix.rid }} -o ./publish/${{ matrix.rid }}
      # ^ Ověř cestu

    - name: Set executable permissions (Linux)
      if: runner.os == 'Linux'
      run: chmod +x ./publish/${{ matrix.rid }}/${{ matrix.output_name }}
      shell: bash

    # Určení názvu a cesty archivu
    - name: Set Archive Name
      id: archive_details
      shell: bash
      run: |
        ARCHIVE_NAME="context2cb-${{ github.event.release.tag_name }}-${{ matrix.artifact_suffix }}.${{ matrix.archive_format }}"
        echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_OUTPUT
        SOURCE_PATH="./publish/${{ matrix.rid }}/${{ matrix.output_name }}"
        echo "SOURCE_PATH=${SOURCE_PATH}" >> $GITHUB_OUTPUT

    - name: Archive output (ZIP)
      if: matrix.archive_format == 'zip'
      shell: pwsh
      run: |
        Compress-Archive -Path "${{ steps.archive_details.outputs.SOURCE_PATH }}" -DestinationPath "${{ steps.archive_details.outputs.ARCHIVE_NAME }}" -Force

    - name: Archive output (TAR.GZ)
      if: matrix.archive_format == 'tar.gz'
      shell: bash
      run: |
        tar czvf "${{ steps.archive_details.outputs.ARCHIVE_NAME }}" -C "$(dirname "${{ steps.archive_details.outputs.SOURCE_PATH }}")" "$(basename "${{ steps.archive_details.outputs.SOURCE_PATH }}")"

    # --- NAHRÁNÍ JAKO RELEASE ASSET (k existujícímu release) ---
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Token se automaticky předá
      with:
        # URL pro nahrání se vezme z trigger události (publikovaný release)
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ${{ steps.archive_details.outputs.ARCHIVE_NAME }} # Cesta k vytvořenému archivu
        asset_name: ${{ steps.archive_details.outputs.ARCHIVE_NAME }} # Název souboru na GitHubu
        asset_content_type: application/${{ matrix.archive_format == 'zip' && 'zip' || 'gzip' }} # MIME typ