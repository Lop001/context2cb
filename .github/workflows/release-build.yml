name: .NET Release Build & Publish

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*' # Trigger na tagy jako v1.0.0, v1.2.3, v1.2.3-beta1 atd.

permissions:
  contents: write 
jobs:
  build-and-publish:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            rid: linux-x64
            artifact_suffix: linux-x64
            archive_format: tar.gz
          - os: macos-latest
            rid: osx-x64
            artifact_suffix: macos-x64
            archive_format: zip
          - os: macos-latest
            rid: osx-arm64
            artifact_suffix: macos-arm64
            archive_format: zip
          - os: windows-latest
            rid: win-x64
            artifact_suffix: win-x64
            archive_format: zip

    runs-on: ${{ matrix.os }}
    name: Build for ${{ matrix.artifact_suffix }}

    steps:
    - name: Check out code
      uses: actions/checkout@v4

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x' # Nebo specifická verze

    - name: Restore dependencies
      run: dotnet restore src/ContextCli/ContextCli.csproj

    - name: Publish application
      shell: pwsh
      run: dotnet publish src/ContextCli/ContextCli.csproj -c Release --self-contained true /p:PublishSingleFile=true -r ${{ matrix.rid }} -o ./publish/${{ matrix.rid }}

    - name: Set executable permissions (Linux)
      if: runner.os == 'Linux'
      run: chmod +x ./publish/${{ matrix.rid }}/context2cb
      shell: bash

    - name: Archive output (ZIP)
      if: matrix.archive_format == 'zip'
      shell: pwsh
      run: |
        $sourceDir = "./publish/${{ matrix.rid }}"
        # Použijeme github.ref_name, což je název tagu (např. v1.0.0)
        $zipFilePath = "./context2cb-${{ github.ref_name }}-${{ matrix.artifact_suffix }}.zip"
        $executable = Get-ChildItem -Path $sourceDir -Filter context2cb* | Select-Object -First 1
        if ($null -ne $executable) {
          Compress-Archive -Path $executable.FullName -DestinationPath $zipFilePath -Force
        } else {
          Write-Error "Executable 'context2cb*' not found in $sourceDir"
          exit 1
        }

    - name: Archive output (TAR.GZ)
      if: matrix.archive_format == 'tar.gz'
      shell: bash
      run: |
        cd ./publish/${{ matrix.rid }}
        executable=$(find . -name 'context2cb' -print -quit)
        if [ -n "$executable" ]; then
          # Použijeme github.ref_name, což je název tagu (např. v1.0.0)
          tar czvf ../../context2cb-${{ github.ref_name }}-${{ matrix.artifact_suffix }}.tar.gz $executable
        else
          echo "Executable 'context2cb' not found in $(pwd)"
          exit 1
        fi
        cd ../../

    # Akce ncipollo/release-action je robustnější a umí vytvořit/aktualizovat release
    # spojený s tagem a nahrát k němu assety.
    - name: Create or Update Release with Assets
      uses: ncipollo/release-action@v1 # Nahrazení původní akce
      with:
        # Token se předá automaticky
        # Název tagu se vezme automaticky z github.ref_name
        # artifactErrorsFailBuild: true # Můžeš nastavit, aby selhání nahrání artefaktu selhalo celý build
        allowUpdates: true # Explicitně povolí aktualizaci existujícího release
        artifacts: "./context2cb-${{ github.ref_name }}-${{ matrix.artifact_suffix }}.${{ matrix.archive_format }}" # Cesta k archivu, který se má nahrát
        # Můžeš přidat další volby, např. draft: false, prerelease: contains(github.ref, '-'), generateReleaseNotes: true